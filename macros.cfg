#################################
######### MACROS  ###############
#################################

[gcode_macro START_PRINT]
gcode:
      #Get Printer built volume dimensions
      {% set X_MAX = printer.toolhead.axis_maximum.x|default(220)|float %}
      {% set Y_MAX = printer.toolhead.axis_maximum.y|default(235)|float %}
      {% set Z_MAX = printer.toolhead.axis_maximum.z|default(270)|float %}

      #Get Nozzle diameter and filament width for conditioning
      {% set NOZZLE = printer.extruder.nozzle_diameter|default(0.4)|float %}
      {% set FILADIA = printer.extruder.filament_diameter|default(1.75)|float %}

      #Set Start coordinates of purge lines
      {% set X_START = 2.0|default(2.0)|float %}
      {% set Y_START = 10.0|default(10.0)|float %}

      #Calculate purge line extrusion volume and filament length
      {% set PRIMER_WIDTH = 1 * NOZZLE %}                    
      {% set PRIMER_HEIGHT = 0.5 * NOZZLE %}           
      {% set PRIMER_SECT = PRIMER_WIDTH * PRIMER_HEIGHT %}    
      {% set PRIMER_VOL = PRIMER_SECT * (Y_MAX - 3 - Y_START) * 2 %}    
      {% set FILA_SECT = 3.1415 * ( FILADIA / 2.0) * ( FILADIA / 2.0) %}          
      {% set FILA_LENGTH = 1.55 * PRIMER_VOL / FILA_SECT %}      

      #Get Bed and Extruder temperature from Slicer
      {% set BED_TEMP = params.BED_TEMP|default(65)|float %}
      {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
	  {% set FILAMENT_TYPE = params.FILAMENT|default(PLA)|string %}
      {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
      #{% set EXTRUDER_TEMP_PRE = 140|float %}
      {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(205)|float %}
      #Preheat nozzle and bed
      #M104 S{EXTRUDER_TEMP_PRE} T0                        
      #M190 S{BED_TEMP}                                

      #Home
      G28
      BED_MESH_CALIBRATE

      #Park nozzle while things heat up
      #G1 X{X_START} Y{Y_START-5} Z{PRIMER_HEIGHT} F6000.0
      SMART_PARK                 

      #Heat nozzle and bed
      M190 S{BED_TEMP}                               
      M109 S{EXTRUDER_TEMP} T0                       

      #Purge line
      G90
      G92 E0
      VORON_PURGE     
      # G1 X{X_START} Y{Y_START} Z{PRIMER_HEIGHT} F6000.0     
      # G1 X{X_START} Y{Y_MAX - 3 - Y_START} Z{PRIMER_HEIGHT} E{FILA_LENGTH} F2000.0 
      # G1 X{X_START + PRIMER_WIDTH} Y{Y_MAX - 3 - Y_START} Z{PRIMER_HEIGHT} 
      # G1 X{X_START + PRIMER_WIDTH} Y{Y_START} Z{PRIMER_HEIGHT} E{FILA_LENGTH*2} F2000.0 
      G92 E0            
      G1 Z2.0 F600        
      G1 Z0.2 F600        
      G1 Z2.0 F600

########################################################################################################################################
#########################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$###########################################################################

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
   {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

#####################################################################################################################################
#########################################################################################################################################

[gcode_macro END_PRINT]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                 ; retract filament
    G91                            ; relative positioning
    #   Get Boundaries
    {% set X_MIN = printer.toolhead.axis_minimum.x|default(0)|float %}
    {% set Y_MAX = printer.toolhead.axis_maximum.y|default(235)|float %}
    {% set max_z = printer.toolhead.axis_maximum.z|default(270)|float %}
    {% if printer.toolhead.position.z < (max_z - 2) %}
      {% set z_safe = 2.0 %}
    {% else %}
      {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    G0 Z{z_safe} F3600             ; move nozzle up and present print
    G90
    G0 X{X_MIN} Y{Y_MAX} F3600
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    #G28 X Y
    M84                            ; Disable steppers

###################################################################################################

[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E100 F300                    ; load
   G1 E15 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute

########################################################################################################
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E5 F300                    ; extrude a little to soften tip
   G1 E-20 F1800                  ; retract some, but not too much or it will jam
   M82                            ; set extruder to absolute

#######################################################################################################

#############################################################################################################

[gcode_macro M600]
gcode:
    #LCDRGB R=0 G=1 B=0  ; Turn LCD green
    PAUSE                ; Pause
gcode: PAUSE X=10 Y=10 Z_MIN=50

###############################################################################################################

# [gcode_macro CANCEL_PRINT]
# description: Cancel the actual running print
# rename_existing: CANCEL_PRINT_BASE
# gcode:
#   ##### get user parameters or use default #####
#   {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
#   {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
#   {% set allow_park = False if not macro_found
#                  else False if client.park_at_cancel is not defined
#                  else True  if client.park_at_cancel|lower == 'true'
#                  else False %}
#   {% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}
#   ##### define park position #####
#   {% set park_x = ""                                    if not macro_found
#              else ""                                    if client.park_at_cancel_x is not defined
#              else "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}
#   {% set park_y = ""                                    if not macro_found
#              else ""                                    if client.park_at_cancel_y is not defined
#              else "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}
#   {% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}
#   ##### end of definitions #####
#   {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
#   _CLIENT_RETRACT LENGTH={retract}
#   TURN_OFF_HEATERS
#   M106 S0
#   # clear pause_next_layer and pause_at_layer as preparation for next print
#   SET_PAUSE_NEXT_LAYER ENABLE=0
#   SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
#   CANCEL_PRINT_BASE

#############################################################################################

# [gcode_macro PAUSE]
# description: Pause the actual running print
# rename_existing: PAUSE_BASE
# gcode:
#   PAUSE_BASE
#   _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

###################################################################################################

# [gcode_macro RESUME]
# description: Resume the actual running print
# rename_existing: RESUME_BASE
# gcode:
#   ##### get user parameters or use default #####
#   {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
#   {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
#   {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
#   {% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}
#   ##### end of definitions #####
#   _CLIENT_EXTRUDE
#   RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
  
# # Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]

############################################################################################################

# [gcode_macro SET_PAUSE_NEXT_LAYER]
# description: Enable a pause if the next layer is reached
# gcode:
#   {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
#   {% set ENABLE = params.ENABLE | default(1) | int != 0 %}
#   {% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
#   SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# # Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]

###################################################################################################################

# [gcode_macro SET_PAUSE_AT_LAYER]
# description: Enable/disable a pause if a given layer number is reached
# gcode:
#   {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
#   {% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
#              else params.LAYER is defined %}
#   {% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
#   {% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
#   SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# # Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]

################################################################################################################

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    {action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    {action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}
  
##### internal use #####

################################################################################################################

# [gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
# description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
# gcode:
#   ##### get user parameters or use default #####
#   {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
#   {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
#   {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
#   {% set use_custom     = False if not macro_found
#                      else False if client.use_custom_pos is not defined
#                      else True  if client.use_custom_pos|lower == 'true'
#                      else False %}
#   {% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}
#   {% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}
#   {% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}
#   {% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}
#   {% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}
#   ##### get config and toolhead values #####
#   {% set origin    = printer.gcode_move.homing_origin %}
#   {% set act       = printer.gcode_move.gcode_position %}
#   {% set max       = printer.toolhead.axis_maximum %}
#   {% set cone      = printer.toolhead.cone_start_z|default(max.z) %} ; height as long the toolhead can reach max and min of an delta
#   {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
#                 else False %}
#   ##### define park position #####
#   {% set z_min = params.Z_MIN|default(0)|float %}
#   {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
#   {% set x_park = params.X       if params.X is defined
#              else custom_park_x  if use_custom
#              else 0.0            if round_bed
#              else (max.x - 5.0) %}
#   {% set y_park = params.Y       if params.Y is defined
#              else custom_park_y  if use_custom
#              else (max.y - 5.0)  if round_bed and z_park < cone
#              else 0.0            if round_bed
#              else (max.y - 5.0) %}
#   ##### end of definitions #####
#   _CLIENT_RETRACT
#   {% if "xyz" in printer.toolhead.homed_axes %}
#     G90
#     G1 Z{z_park} F{sp_hop}
#     G1 X{x_park} Y{y_park} F{sp_move}
#     {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
#   {% else %}
#     {action_respond_info("Printer not homed")}
#   {% endif %}

##################################################################################################### 

[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
  {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set use_fw_retract = False if not macro_found
                     else False if client.use_fw_retract is not defined
                     else True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined
                     else False %}

  {% set length = (params.LENGTH|float) if params.LENGTH is defined
             else 1.0 if not macro_found
             else client.unretract|default(1.0) %}

  {% set speed = params.SPEED if params.SPEED is defined
            else 35 if not macro_found
            else client.speed_unretract|default(35) %}

  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}

  {% if printer.extruder.can_extrude %}
    {% if use_fw_retract %}
      {% if length < 0 %}
        G10
      {% else %}
        G11
      {% endif %}
    {% else %}
      M83
      G1 E{length} F{(speed|float|abs) * 60}
      {% if absolute_extrude %}
        M82
      {% endif %}
    {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
###########################################################################################################

[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}

  {% set length = (params.LENGTH|float) if params.LENGTH is defined
             else 1.0 if not macro_found
             else client.retract|default(1.0) %}

  {% set speed = params.SPEED if params.SPEED is defined
            else 35 if not macro_found
            else client.speed_retract|default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

########################################################################################################

[gcode_macro RESPOND]
rename_existing: BASE_RESPOND
gcode:
  {% set colors = ('primary', 'secondary', 'accent', 'info', 'success', 'error', 'warning') %}

  {% if params.PREFIX is defined %}
    {% set prefix = 'PREFIX=' + params.PREFIX|string %}
  {% endif %}

  {% if params.TYPE is defined %}
      {% if params.TYPE in ('echo', 'echo_no_space', 'command', 'error') and params.TYPE != '' %}    
          {% set type = 'TYPE=' + params.TYPE|string %}
      {% else %}
          BASE_RESPOND TYPE=error MSG="RESPOND TYPE '{params.TYPE}' is invalid. Must be one of 'echo', 'command' or 'error'"
      {% endif %}
  {% endif %}
        
  {% if params.MSG is defined %}   
    {% set msg = 'MSG="'+ params.MSG + '"'|string %}
  {% endif %}

  {% if params.COLOR is defined %}
      {% set color = params.COLOR|lower %}

      {% if color in colors %}
          {% set msg = 'MSG="<span class=' + color + '--text>' + params.MSG + '</span>"'|string %}
  
      {% else %}
          BASE_RESPOND TYPE=error MSG="RESPOND COLOR '{color}' is invalid. Must be one of 'primary', 'secondary', 'accent', 'info', 'success', 'warning' or 'error'"
      {% endif %}
       
  {% endif %}
  BASE_RESPOND {prefix} {type} {msg}
########################################################################################################

### BTT KnOmI  ###

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
variable_probing:False
gcode:
    SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probing VALUE=True
    BED_MESH_CALIBRATE_BASE
    SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probing VALUE=False

[gcode_macro G28]
rename_existing: G0028
variable_homing:False
gcode:
    SET_GCODE_VARIABLE MACRO=G28 VARIABLE=homing VALUE=True
    G0028
    SET_GCODE_VARIABLE MACRO=G28 VARIABLE=homing VALUE=False

###########################################################################################


#####################################################################################################################################